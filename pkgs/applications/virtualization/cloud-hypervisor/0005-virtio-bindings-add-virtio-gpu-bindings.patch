From ffd586ecc6762da0e1ea870e0858391f9c158d8b Mon Sep 17 00:00:00 2001
From: Alyssa Ross <alyssa.ross@unikie.com>
Date: Wed, 31 Aug 2022 17:11:12 +0000
Subject: [PATCH 5/5] virtio-bindings: add virtio-gpu bindings

Signed-off-by: Alyssa Ross <alyssa.ross@unikie.com>
---
 crates/virtio-bindings/CONTRIBUTING.md   |    8 +-
 crates/virtio-bindings/src/lib.rs        |    1 +
 crates/virtio-bindings/src/virtio_gpu.rs | 3532 ++++++++++++++++++++++
 3 files changed, 3537 insertions(+), 4 deletions(-)
 create mode 100644 crates/virtio-bindings/src/virtio_gpu.rs

diff --git a/crates/virtio-bindings/CONTRIBUTING.md b/crates/virtio-bindings/CONTRIBUTING.md
index 1b3da2f..d435078 100644
--- a/crates/virtio-bindings/CONTRIBUTING.md
+++ b/crates/virtio-bindings/CONTRIBUTING.md
@@ -30,12 +30,12 @@ git checkout v5.0
 
 # Step 2: Generate the bindings from the kernel headers. We need to
 # generate a file for each one of the virtio headers we're interested on.
-# For the moment, we're generating "virtio_blk", "virtio_net" and
-# "virtio_ring". Feel free to add additional header files if you need them
-# for your project.
+# For the moment, we're generating "virtio_blk", "virtio_gpu", "virtio_net"
+# and "virtio_ring". Feel free to add additional header files if you need
+# them for your project.
 make headers_install INSTALL_HDR_PATH=v5_0_headers
 cd v5_0_headers
-for i in virtio_blk virtio_net virtio_ring ; do \
+for i in virtio_blk virtio_gpu virtio_net virtio_ring ; do \
     bindgen include/linux/$i.h -o $i.rs \
     --with-derive-default \
     --with-derive-partialeq \
diff --git a/crates/virtio-bindings/src/lib.rs b/crates/virtio-bindings/src/lib.rs
index 9702f17..543f630 100644
--- a/crates/virtio-bindings/src/lib.rs
+++ b/crates/virtio-bindings/src/lib.rs
@@ -7,6 +7,7 @@
 #![allow(non_snake_case)]
 
 pub mod virtio_blk;
+pub mod virtio_gpu;
 pub mod virtio_net;
 pub mod virtio_ring;
 
diff --git a/crates/virtio-bindings/src/virtio_gpu.rs b/crates/virtio-bindings/src/virtio_gpu.rs
new file mode 100644
index 0000000..b1f9e5f
--- /dev/null
+++ b/crates/virtio-bindings/src/virtio_gpu.rs
@@ -0,0 +1,3532 @@
+/* automatically generated by rust-bindgen 0.60.1 */
+
+#[repr(C)]
+#[derive(Default)]
+pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
+impl<T> __IncompleteArrayField<T> {
+    #[inline]
+    pub const fn new() -> Self {
+        __IncompleteArrayField(::std::marker::PhantomData, [])
+    }
+    #[inline]
+    pub fn as_ptr(&self) -> *const T {
+        self as *const _ as *const T
+    }
+    #[inline]
+    pub fn as_mut_ptr(&mut self) -> *mut T {
+        self as *mut _ as *mut T
+    }
+    #[inline]
+    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
+        ::std::slice::from_raw_parts(self.as_ptr(), len)
+    }
+    #[inline]
+    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
+        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
+    }
+}
+impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
+    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        fmt.write_str("__IncompleteArrayField")
+    }
+}
+pub const __BITS_PER_LONG: u32 = 64;
+pub const __FD_SETSIZE: u32 = 1024;
+pub const VIRTIO_GPU_F_VIRGL: u32 = 0;
+pub const VIRTIO_GPU_F_EDID: u32 = 1;
+pub const VIRTIO_GPU_F_RESOURCE_UUID: u32 = 2;
+pub const VIRTIO_GPU_F_RESOURCE_BLOB: u32 = 3;
+pub const VIRTIO_GPU_F_CONTEXT_INIT: u32 = 4;
+pub const VIRTIO_GPU_FLAG_FENCE: u32 = 1;
+pub const VIRTIO_GPU_FLAG_INFO_RING_IDX: u32 = 2;
+pub const VIRTIO_GPU_MAX_SCANOUTS: u32 = 16;
+pub const VIRTIO_GPU_RESOURCE_FLAG_Y_0_TOP: u32 = 1;
+pub const VIRTIO_GPU_CONTEXT_INIT_CAPSET_ID_MASK: u32 = 255;
+pub const VIRTIO_GPU_CAPSET_VIRGL: u32 = 1;
+pub const VIRTIO_GPU_CAPSET_VIRGL2: u32 = 2;
+pub const VIRTIO_GPU_EVENT_DISPLAY: u32 = 1;
+pub const VIRTIO_GPU_BLOB_MEM_GUEST: u32 = 1;
+pub const VIRTIO_GPU_BLOB_MEM_HOST3D: u32 = 2;
+pub const VIRTIO_GPU_BLOB_MEM_HOST3D_GUEST: u32 = 3;
+pub const VIRTIO_GPU_BLOB_FLAG_USE_MAPPABLE: u32 = 1;
+pub const VIRTIO_GPU_BLOB_FLAG_USE_SHAREABLE: u32 = 2;
+pub const VIRTIO_GPU_BLOB_FLAG_USE_CROSS_DEVICE: u32 = 4;
+pub const VIRTIO_GPU_MAP_CACHE_MASK: u32 = 15;
+pub const VIRTIO_GPU_MAP_CACHE_NONE: u32 = 0;
+pub const VIRTIO_GPU_MAP_CACHE_CACHED: u32 = 1;
+pub const VIRTIO_GPU_MAP_CACHE_UNCACHED: u32 = 2;
+pub const VIRTIO_GPU_MAP_CACHE_WC: u32 = 3;
+pub type __s8 = ::std::os::raw::c_schar;
+pub type __u8 = ::std::os::raw::c_uchar;
+pub type __s16 = ::std::os::raw::c_short;
+pub type __u16 = ::std::os::raw::c_ushort;
+pub type __s32 = ::std::os::raw::c_int;
+pub type __u32 = ::std::os::raw::c_uint;
+pub type __s64 = ::std::os::raw::c_longlong;
+pub type __u64 = ::std::os::raw::c_ulonglong;
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct __kernel_fd_set {
+    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
+}
+#[test]
+fn bindgen_test_layout___kernel_fd_set() {
+    assert_eq!(
+        ::std::mem::size_of::<__kernel_fd_set>(),
+        128usize,
+        concat!("Size of: ", stringify!(__kernel_fd_set))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<__kernel_fd_set>(),
+        8usize,
+        concat!("Alignment of ", stringify!(__kernel_fd_set))
+    );
+    fn test_field_fds_bits() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<__kernel_fd_set>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(__kernel_fd_set),
+                "::",
+                stringify!(fds_bits)
+            )
+        );
+    }
+    test_field_fds_bits();
+}
+pub type __kernel_sighandler_t =
+    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
+pub type __kernel_key_t = ::std::os::raw::c_int;
+pub type __kernel_mqd_t = ::std::os::raw::c_int;
+pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
+pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
+pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
+pub type __kernel_long_t = ::std::os::raw::c_long;
+pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
+pub type __kernel_ino_t = __kernel_ulong_t;
+pub type __kernel_mode_t = ::std::os::raw::c_uint;
+pub type __kernel_pid_t = ::std::os::raw::c_int;
+pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
+pub type __kernel_uid_t = ::std::os::raw::c_uint;
+pub type __kernel_gid_t = ::std::os::raw::c_uint;
+pub type __kernel_suseconds_t = __kernel_long_t;
+pub type __kernel_daddr_t = ::std::os::raw::c_int;
+pub type __kernel_uid32_t = ::std::os::raw::c_uint;
+pub type __kernel_gid32_t = ::std::os::raw::c_uint;
+pub type __kernel_size_t = __kernel_ulong_t;
+pub type __kernel_ssize_t = __kernel_long_t;
+pub type __kernel_ptrdiff_t = __kernel_long_t;
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct __kernel_fsid_t {
+    pub val: [::std::os::raw::c_int; 2usize],
+}
+#[test]
+fn bindgen_test_layout___kernel_fsid_t() {
+    assert_eq!(
+        ::std::mem::size_of::<__kernel_fsid_t>(),
+        8usize,
+        concat!("Size of: ", stringify!(__kernel_fsid_t))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<__kernel_fsid_t>(),
+        4usize,
+        concat!("Alignment of ", stringify!(__kernel_fsid_t))
+    );
+    fn test_field_val() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<__kernel_fsid_t>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(__kernel_fsid_t),
+                "::",
+                stringify!(val)
+            )
+        );
+    }
+    test_field_val();
+}
+pub type __kernel_off_t = __kernel_long_t;
+pub type __kernel_loff_t = ::std::os::raw::c_longlong;
+pub type __kernel_old_time_t = __kernel_long_t;
+pub type __kernel_time_t = __kernel_long_t;
+pub type __kernel_time64_t = ::std::os::raw::c_longlong;
+pub type __kernel_clock_t = __kernel_long_t;
+pub type __kernel_timer_t = ::std::os::raw::c_int;
+pub type __kernel_clockid_t = ::std::os::raw::c_int;
+pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
+pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
+pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
+pub type __le16 = __u16;
+pub type __be16 = __u16;
+pub type __le32 = __u32;
+pub type __be32 = __u32;
+pub type __le64 = __u64;
+pub type __be64 = __u64;
+pub type __sum16 = __u16;
+pub type __wsum = __u32;
+pub type __poll_t = ::std::os::raw::c_uint;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_UNDEFINED: virtio_gpu_ctrl_type = 0;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_GET_DISPLAY_INFO: virtio_gpu_ctrl_type = 256;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_RESOURCE_CREATE_2D: virtio_gpu_ctrl_type = 257;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_RESOURCE_UNREF: virtio_gpu_ctrl_type = 258;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_SET_SCANOUT: virtio_gpu_ctrl_type = 259;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_RESOURCE_FLUSH: virtio_gpu_ctrl_type = 260;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_TRANSFER_TO_HOST_2D: virtio_gpu_ctrl_type = 261;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_RESOURCE_ATTACH_BACKING: virtio_gpu_ctrl_type = 262;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_RESOURCE_DETACH_BACKING: virtio_gpu_ctrl_type = 263;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_GET_CAPSET_INFO: virtio_gpu_ctrl_type = 264;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_GET_CAPSET: virtio_gpu_ctrl_type = 265;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_GET_EDID: virtio_gpu_ctrl_type = 266;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_RESOURCE_ASSIGN_UUID: virtio_gpu_ctrl_type = 267;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_RESOURCE_CREATE_BLOB: virtio_gpu_ctrl_type = 268;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_SET_SCANOUT_BLOB: virtio_gpu_ctrl_type = 269;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_CTX_CREATE: virtio_gpu_ctrl_type = 512;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_CTX_DESTROY: virtio_gpu_ctrl_type = 513;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_CTX_ATTACH_RESOURCE: virtio_gpu_ctrl_type = 514;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_CTX_DETACH_RESOURCE: virtio_gpu_ctrl_type = 515;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_RESOURCE_CREATE_3D: virtio_gpu_ctrl_type = 516;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_TRANSFER_TO_HOST_3D: virtio_gpu_ctrl_type = 517;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_TRANSFER_FROM_HOST_3D: virtio_gpu_ctrl_type = 518;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_SUBMIT_3D: virtio_gpu_ctrl_type = 519;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_RESOURCE_MAP_BLOB: virtio_gpu_ctrl_type = 520;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_RESOURCE_UNMAP_BLOB: virtio_gpu_ctrl_type = 521;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_UPDATE_CURSOR: virtio_gpu_ctrl_type = 768;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_CMD_MOVE_CURSOR: virtio_gpu_ctrl_type = 769;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_OK_NODATA: virtio_gpu_ctrl_type = 4352;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_OK_DISPLAY_INFO: virtio_gpu_ctrl_type = 4353;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_OK_CAPSET_INFO: virtio_gpu_ctrl_type = 4354;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_OK_CAPSET: virtio_gpu_ctrl_type = 4355;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_OK_EDID: virtio_gpu_ctrl_type = 4356;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_OK_RESOURCE_UUID: virtio_gpu_ctrl_type = 4357;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_OK_MAP_INFO: virtio_gpu_ctrl_type = 4358;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_ERR_UNSPEC: virtio_gpu_ctrl_type = 4608;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_ERR_OUT_OF_MEMORY: virtio_gpu_ctrl_type = 4609;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_ERR_INVALID_SCANOUT_ID: virtio_gpu_ctrl_type = 4610;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_ERR_INVALID_RESOURCE_ID: virtio_gpu_ctrl_type = 4611;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_ERR_INVALID_CONTEXT_ID: virtio_gpu_ctrl_type = 4612;
+pub const virtio_gpu_ctrl_type_VIRTIO_GPU_RESP_ERR_INVALID_PARAMETER: virtio_gpu_ctrl_type = 4613;
+pub type virtio_gpu_ctrl_type = ::std::os::raw::c_uint;
+pub const virtio_gpu_shm_id_VIRTIO_GPU_SHM_ID_UNDEFINED: virtio_gpu_shm_id = 0;
+pub const virtio_gpu_shm_id_VIRTIO_GPU_SHM_ID_HOST_VISIBLE: virtio_gpu_shm_id = 1;
+pub type virtio_gpu_shm_id = ::std::os::raw::c_uint;
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_ctrl_hdr {
+    pub type_: __le32,
+    pub flags: __le32,
+    pub fence_id: __le64,
+    pub ctx_id: __le32,
+    pub ring_idx: __u8,
+    pub padding: [__u8; 3usize],
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_ctrl_hdr() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_ctrl_hdr>(),
+        24usize,
+        concat!("Size of: ", stringify!(virtio_gpu_ctrl_hdr))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_ctrl_hdr>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_ctrl_hdr))
+    );
+    fn test_field_type() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctrl_hdr>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctrl_hdr),
+                "::",
+                stringify!(type_)
+            )
+        );
+    }
+    test_field_type();
+    fn test_field_flags() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctrl_hdr>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
+            },
+            4usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctrl_hdr),
+                "::",
+                stringify!(flags)
+            )
+        );
+    }
+    test_field_flags();
+    fn test_field_fence_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctrl_hdr>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).fence_id) as usize - ptr as usize
+            },
+            8usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctrl_hdr),
+                "::",
+                stringify!(fence_id)
+            )
+        );
+    }
+    test_field_fence_id();
+    fn test_field_ctx_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctrl_hdr>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).ctx_id) as usize - ptr as usize
+            },
+            16usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctrl_hdr),
+                "::",
+                stringify!(ctx_id)
+            )
+        );
+    }
+    test_field_ctx_id();
+    fn test_field_ring_idx() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctrl_hdr>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).ring_idx) as usize - ptr as usize
+            },
+            20usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctrl_hdr),
+                "::",
+                stringify!(ring_idx)
+            )
+        );
+    }
+    test_field_ring_idx();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctrl_hdr>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            21usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctrl_hdr),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_cursor_pos {
+    pub scanout_id: __le32,
+    pub x: __le32,
+    pub y: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_cursor_pos() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_cursor_pos>(),
+        16usize,
+        concat!("Size of: ", stringify!(virtio_gpu_cursor_pos))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_cursor_pos>(),
+        4usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_cursor_pos))
+    );
+    fn test_field_scanout_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_cursor_pos>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).scanout_id) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_cursor_pos),
+                "::",
+                stringify!(scanout_id)
+            )
+        );
+    }
+    test_field_scanout_id();
+    fn test_field_x() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_cursor_pos>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
+            },
+            4usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_cursor_pos),
+                "::",
+                stringify!(x)
+            )
+        );
+    }
+    test_field_x();
+    fn test_field_y() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_cursor_pos>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
+            },
+            8usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_cursor_pos),
+                "::",
+                stringify!(y)
+            )
+        );
+    }
+    test_field_y();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_cursor_pos>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            12usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_cursor_pos),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_update_cursor {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub pos: virtio_gpu_cursor_pos,
+    pub resource_id: __le32,
+    pub hot_x: __le32,
+    pub hot_y: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_update_cursor() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_update_cursor>(),
+        56usize,
+        concat!("Size of: ", stringify!(virtio_gpu_update_cursor))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_update_cursor>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_update_cursor))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_update_cursor>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_update_cursor),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_pos() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_update_cursor>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_update_cursor),
+                "::",
+                stringify!(pos)
+            )
+        );
+    }
+    test_field_pos();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_update_cursor>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            40usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_update_cursor),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_hot_x() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_update_cursor>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hot_x) as usize - ptr as usize
+            },
+            44usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_update_cursor),
+                "::",
+                stringify!(hot_x)
+            )
+        );
+    }
+    test_field_hot_x();
+    fn test_field_hot_y() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_update_cursor>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hot_y) as usize - ptr as usize
+            },
+            48usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_update_cursor),
+                "::",
+                stringify!(hot_y)
+            )
+        );
+    }
+    test_field_hot_y();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_update_cursor>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            52usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_update_cursor),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_rect {
+    pub x: __le32,
+    pub y: __le32,
+    pub width: __le32,
+    pub height: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_rect() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_rect>(),
+        16usize,
+        concat!("Size of: ", stringify!(virtio_gpu_rect))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_rect>(),
+        4usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_rect))
+    );
+    fn test_field_x() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_rect>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_rect),
+                "::",
+                stringify!(x)
+            )
+        );
+    }
+    test_field_x();
+    fn test_field_y() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_rect>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
+            },
+            4usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_rect),
+                "::",
+                stringify!(y)
+            )
+        );
+    }
+    test_field_y();
+    fn test_field_width() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_rect>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
+            },
+            8usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_rect),
+                "::",
+                stringify!(width)
+            )
+        );
+    }
+    test_field_width();
+    fn test_field_height() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_rect>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
+            },
+            12usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_rect),
+                "::",
+                stringify!(height)
+            )
+        );
+    }
+    test_field_height();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resource_unref {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub resource_id: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resource_unref() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resource_unref>(),
+        32usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resource_unref))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resource_unref>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resource_unref))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_unref>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_unref),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_unref>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_unref),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_unref>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_unref),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resource_create_2d {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub resource_id: __le32,
+    pub format: __le32,
+    pub width: __le32,
+    pub height: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resource_create_2d() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resource_create_2d>(),
+        40usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resource_create_2d))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resource_create_2d>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resource_create_2d))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_2d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_2d),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_2d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_2d),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_format() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_2d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_2d),
+                "::",
+                stringify!(format)
+            )
+        );
+    }
+    test_field_format();
+    fn test_field_width() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_2d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
+            },
+            32usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_2d),
+                "::",
+                stringify!(width)
+            )
+        );
+    }
+    test_field_width();
+    fn test_field_height() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_2d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
+            },
+            36usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_2d),
+                "::",
+                stringify!(height)
+            )
+        );
+    }
+    test_field_height();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_set_scanout {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub r: virtio_gpu_rect,
+    pub scanout_id: __le32,
+    pub resource_id: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_set_scanout() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_set_scanout>(),
+        48usize,
+        concat!("Size of: ", stringify!(virtio_gpu_set_scanout))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_set_scanout>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_set_scanout))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_r() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout),
+                "::",
+                stringify!(r)
+            )
+        );
+    }
+    test_field_r();
+    fn test_field_scanout_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).scanout_id) as usize - ptr as usize
+            },
+            40usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout),
+                "::",
+                stringify!(scanout_id)
+            )
+        );
+    }
+    test_field_scanout_id();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            44usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resource_flush {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub r: virtio_gpu_rect,
+    pub resource_id: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resource_flush() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resource_flush>(),
+        48usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resource_flush))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resource_flush>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resource_flush))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_flush>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_flush),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_r() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_flush>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_flush),
+                "::",
+                stringify!(r)
+            )
+        );
+    }
+    test_field_r();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_flush>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            40usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_flush),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_flush>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            44usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_flush),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_transfer_to_host_2d {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub r: virtio_gpu_rect,
+    pub offset: __le64,
+    pub resource_id: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_transfer_to_host_2d() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_transfer_to_host_2d>(),
+        56usize,
+        concat!("Size of: ", stringify!(virtio_gpu_transfer_to_host_2d))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_transfer_to_host_2d>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_transfer_to_host_2d))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_transfer_to_host_2d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_transfer_to_host_2d),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_r() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_transfer_to_host_2d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_transfer_to_host_2d),
+                "::",
+                stringify!(r)
+            )
+        );
+    }
+    test_field_r();
+    fn test_field_offset() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_transfer_to_host_2d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
+            },
+            40usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_transfer_to_host_2d),
+                "::",
+                stringify!(offset)
+            )
+        );
+    }
+    test_field_offset();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_transfer_to_host_2d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            48usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_transfer_to_host_2d),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_transfer_to_host_2d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            52usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_transfer_to_host_2d),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_mem_entry {
+    pub addr: __le64,
+    pub length: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_mem_entry() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_mem_entry>(),
+        16usize,
+        concat!("Size of: ", stringify!(virtio_gpu_mem_entry))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_mem_entry>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_mem_entry))
+    );
+    fn test_field_addr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_mem_entry>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_mem_entry),
+                "::",
+                stringify!(addr)
+            )
+        );
+    }
+    test_field_addr();
+    fn test_field_length() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_mem_entry>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
+            },
+            8usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_mem_entry),
+                "::",
+                stringify!(length)
+            )
+        );
+    }
+    test_field_length();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_mem_entry>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            12usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_mem_entry),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resource_attach_backing {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub resource_id: __le32,
+    pub nr_entries: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resource_attach_backing() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resource_attach_backing>(),
+        32usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resource_attach_backing))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resource_attach_backing>(),
+        8usize,
+        concat!(
+            "Alignment of ",
+            stringify!(virtio_gpu_resource_attach_backing)
+        )
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit =
+                    ::std::mem::MaybeUninit::<virtio_gpu_resource_attach_backing>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_attach_backing),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit =
+                    ::std::mem::MaybeUninit::<virtio_gpu_resource_attach_backing>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_attach_backing),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_nr_entries() {
+        assert_eq!(
+            unsafe {
+                let uninit =
+                    ::std::mem::MaybeUninit::<virtio_gpu_resource_attach_backing>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).nr_entries) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_attach_backing),
+                "::",
+                stringify!(nr_entries)
+            )
+        );
+    }
+    test_field_nr_entries();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resource_detach_backing {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub resource_id: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resource_detach_backing() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resource_detach_backing>(),
+        32usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resource_detach_backing))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resource_detach_backing>(),
+        8usize,
+        concat!(
+            "Alignment of ",
+            stringify!(virtio_gpu_resource_detach_backing)
+        )
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit =
+                    ::std::mem::MaybeUninit::<virtio_gpu_resource_detach_backing>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_detach_backing),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit =
+                    ::std::mem::MaybeUninit::<virtio_gpu_resource_detach_backing>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_detach_backing),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit =
+                    ::std::mem::MaybeUninit::<virtio_gpu_resource_detach_backing>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_detach_backing),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resp_display_info {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub pmodes: [virtio_gpu_resp_display_info_virtio_gpu_display_one; 16usize],
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resp_display_info_virtio_gpu_display_one {
+    pub r: virtio_gpu_rect,
+    pub enabled: __le32,
+    pub flags: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resp_display_info_virtio_gpu_display_one() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resp_display_info_virtio_gpu_display_one>(),
+        24usize,
+        concat!(
+            "Size of: ",
+            stringify!(virtio_gpu_resp_display_info_virtio_gpu_display_one)
+        )
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resp_display_info_virtio_gpu_display_one>(),
+        4usize,
+        concat!(
+            "Alignment of ",
+            stringify!(virtio_gpu_resp_display_info_virtio_gpu_display_one)
+        )
+    );
+    fn test_field_r() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<
+                    virtio_gpu_resp_display_info_virtio_gpu_display_one,
+                >::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_display_info_virtio_gpu_display_one),
+                "::",
+                stringify!(r)
+            )
+        );
+    }
+    test_field_r();
+    fn test_field_enabled() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<
+                    virtio_gpu_resp_display_info_virtio_gpu_display_one,
+                >::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize
+            },
+            16usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_display_info_virtio_gpu_display_one),
+                "::",
+                stringify!(enabled)
+            )
+        );
+    }
+    test_field_enabled();
+    fn test_field_flags() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<
+                    virtio_gpu_resp_display_info_virtio_gpu_display_one,
+                >::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
+            },
+            20usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_display_info_virtio_gpu_display_one),
+                "::",
+                stringify!(flags)
+            )
+        );
+    }
+    test_field_flags();
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resp_display_info() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resp_display_info>(),
+        408usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resp_display_info))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resp_display_info>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resp_display_info))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_display_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_display_info),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_pmodes() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_display_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).pmodes) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_display_info),
+                "::",
+                stringify!(pmodes)
+            )
+        );
+    }
+    test_field_pmodes();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_box {
+    pub x: __le32,
+    pub y: __le32,
+    pub z: __le32,
+    pub w: __le32,
+    pub h: __le32,
+    pub d: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_box() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_box>(),
+        24usize,
+        concat!("Size of: ", stringify!(virtio_gpu_box))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_box>(),
+        4usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_box))
+    );
+    fn test_field_x() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_box>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_box),
+                "::",
+                stringify!(x)
+            )
+        );
+    }
+    test_field_x();
+    fn test_field_y() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_box>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
+            },
+            4usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_box),
+                "::",
+                stringify!(y)
+            )
+        );
+    }
+    test_field_y();
+    fn test_field_z() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_box>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
+            },
+            8usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_box),
+                "::",
+                stringify!(z)
+            )
+        );
+    }
+    test_field_z();
+    fn test_field_w() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_box>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
+            },
+            12usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_box),
+                "::",
+                stringify!(w)
+            )
+        );
+    }
+    test_field_w();
+    fn test_field_h() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_box>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
+            },
+            16usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_box),
+                "::",
+                stringify!(h)
+            )
+        );
+    }
+    test_field_h();
+    fn test_field_d() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_box>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize
+            },
+            20usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_box),
+                "::",
+                stringify!(d)
+            )
+        );
+    }
+    test_field_d();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_transfer_host_3d {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub box_: virtio_gpu_box,
+    pub offset: __le64,
+    pub resource_id: __le32,
+    pub level: __le32,
+    pub stride: __le32,
+    pub layer_stride: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_transfer_host_3d() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_transfer_host_3d>(),
+        72usize,
+        concat!("Size of: ", stringify!(virtio_gpu_transfer_host_3d))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_transfer_host_3d>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_transfer_host_3d))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_transfer_host_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_transfer_host_3d),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_box() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_transfer_host_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).box_) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_transfer_host_3d),
+                "::",
+                stringify!(box_)
+            )
+        );
+    }
+    test_field_box();
+    fn test_field_offset() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_transfer_host_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
+            },
+            48usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_transfer_host_3d),
+                "::",
+                stringify!(offset)
+            )
+        );
+    }
+    test_field_offset();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_transfer_host_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            56usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_transfer_host_3d),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_level() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_transfer_host_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
+            },
+            60usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_transfer_host_3d),
+                "::",
+                stringify!(level)
+            )
+        );
+    }
+    test_field_level();
+    fn test_field_stride() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_transfer_host_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize
+            },
+            64usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_transfer_host_3d),
+                "::",
+                stringify!(stride)
+            )
+        );
+    }
+    test_field_stride();
+    fn test_field_layer_stride() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_transfer_host_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).layer_stride) as usize - ptr as usize
+            },
+            68usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_transfer_host_3d),
+                "::",
+                stringify!(layer_stride)
+            )
+        );
+    }
+    test_field_layer_stride();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resource_create_3d {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub resource_id: __le32,
+    pub target: __le32,
+    pub format: __le32,
+    pub bind: __le32,
+    pub width: __le32,
+    pub height: __le32,
+    pub depth: __le32,
+    pub array_size: __le32,
+    pub last_level: __le32,
+    pub nr_samples: __le32,
+    pub flags: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resource_create_3d() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resource_create_3d>(),
+        72usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resource_create_3d))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resource_create_3d>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resource_create_3d))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_target() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(target)
+            )
+        );
+    }
+    test_field_target();
+    fn test_field_format() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
+            },
+            32usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(format)
+            )
+        );
+    }
+    test_field_format();
+    fn test_field_bind() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).bind) as usize - ptr as usize
+            },
+            36usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(bind)
+            )
+        );
+    }
+    test_field_bind();
+    fn test_field_width() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
+            },
+            40usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(width)
+            )
+        );
+    }
+    test_field_width();
+    fn test_field_height() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
+            },
+            44usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(height)
+            )
+        );
+    }
+    test_field_height();
+    fn test_field_depth() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize
+            },
+            48usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(depth)
+            )
+        );
+    }
+    test_field_depth();
+    fn test_field_array_size() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).array_size) as usize - ptr as usize
+            },
+            52usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(array_size)
+            )
+        );
+    }
+    test_field_array_size();
+    fn test_field_last_level() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).last_level) as usize - ptr as usize
+            },
+            56usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(last_level)
+            )
+        );
+    }
+    test_field_last_level();
+    fn test_field_nr_samples() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).nr_samples) as usize - ptr as usize
+            },
+            60usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(nr_samples)
+            )
+        );
+    }
+    test_field_nr_samples();
+    fn test_field_flags() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
+            },
+            64usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(flags)
+            )
+        );
+    }
+    test_field_flags();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_3d>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            68usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_3d),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_ctx_create {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub nlen: __le32,
+    pub context_init: __le32,
+    pub debug_name: [::std::os::raw::c_char; 64usize],
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_ctx_create() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_ctx_create>(),
+        96usize,
+        concat!("Size of: ", stringify!(virtio_gpu_ctx_create))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_ctx_create>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_ctx_create))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctx_create>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctx_create),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_nlen() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctx_create>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).nlen) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctx_create),
+                "::",
+                stringify!(nlen)
+            )
+        );
+    }
+    test_field_nlen();
+    fn test_field_context_init() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctx_create>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).context_init) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctx_create),
+                "::",
+                stringify!(context_init)
+            )
+        );
+    }
+    test_field_context_init();
+    fn test_field_debug_name() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctx_create>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).debug_name) as usize - ptr as usize
+            },
+            32usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctx_create),
+                "::",
+                stringify!(debug_name)
+            )
+        );
+    }
+    test_field_debug_name();
+}
+impl Default for virtio_gpu_ctx_create {
+    fn default() -> Self {
+        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
+        unsafe {
+            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
+            s.assume_init()
+        }
+    }
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_ctx_destroy {
+    pub hdr: virtio_gpu_ctrl_hdr,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_ctx_destroy() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_ctx_destroy>(),
+        24usize,
+        concat!("Size of: ", stringify!(virtio_gpu_ctx_destroy))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_ctx_destroy>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_ctx_destroy))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctx_destroy>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctx_destroy),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_ctx_resource {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub resource_id: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_ctx_resource() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_ctx_resource>(),
+        32usize,
+        concat!("Size of: ", stringify!(virtio_gpu_ctx_resource))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_ctx_resource>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_ctx_resource))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctx_resource>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctx_resource),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctx_resource>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctx_resource),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_ctx_resource>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_ctx_resource),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_cmd_submit {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub size: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_cmd_submit() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_cmd_submit>(),
+        32usize,
+        concat!("Size of: ", stringify!(virtio_gpu_cmd_submit))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_cmd_submit>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_cmd_submit))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_cmd_submit>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_cmd_submit),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_size() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_cmd_submit>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_cmd_submit),
+                "::",
+                stringify!(size)
+            )
+        );
+    }
+    test_field_size();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_cmd_submit>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_cmd_submit),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_get_capset_info {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub capset_index: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_get_capset_info() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_get_capset_info>(),
+        32usize,
+        concat!("Size of: ", stringify!(virtio_gpu_get_capset_info))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_get_capset_info>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_get_capset_info))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_get_capset_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_get_capset_info),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_capset_index() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_get_capset_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).capset_index) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_get_capset_info),
+                "::",
+                stringify!(capset_index)
+            )
+        );
+    }
+    test_field_capset_index();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_get_capset_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_get_capset_info),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resp_capset_info {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub capset_id: __le32,
+    pub capset_max_version: __le32,
+    pub capset_max_size: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resp_capset_info() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resp_capset_info>(),
+        40usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resp_capset_info))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resp_capset_info>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resp_capset_info))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_capset_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_capset_info),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_capset_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_capset_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).capset_id) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_capset_info),
+                "::",
+                stringify!(capset_id)
+            )
+        );
+    }
+    test_field_capset_id();
+    fn test_field_capset_max_version() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_capset_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).capset_max_version) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_capset_info),
+                "::",
+                stringify!(capset_max_version)
+            )
+        );
+    }
+    test_field_capset_max_version();
+    fn test_field_capset_max_size() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_capset_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).capset_max_size) as usize - ptr as usize
+            },
+            32usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_capset_info),
+                "::",
+                stringify!(capset_max_size)
+            )
+        );
+    }
+    test_field_capset_max_size();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_capset_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            36usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_capset_info),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_get_capset {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub capset_id: __le32,
+    pub capset_version: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_get_capset() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_get_capset>(),
+        32usize,
+        concat!("Size of: ", stringify!(virtio_gpu_get_capset))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_get_capset>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_get_capset))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_get_capset>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_get_capset),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_capset_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_get_capset>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).capset_id) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_get_capset),
+                "::",
+                stringify!(capset_id)
+            )
+        );
+    }
+    test_field_capset_id();
+    fn test_field_capset_version() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_get_capset>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).capset_version) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_get_capset),
+                "::",
+                stringify!(capset_version)
+            )
+        );
+    }
+    test_field_capset_version();
+}
+#[repr(C)]
+#[derive(Debug, Default)]
+pub struct virtio_gpu_resp_capset {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub capset_data: __IncompleteArrayField<__u8>,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resp_capset() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resp_capset>(),
+        24usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resp_capset))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resp_capset>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resp_capset))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_capset>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_capset),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_capset_data() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_capset>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).capset_data) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_capset),
+                "::",
+                stringify!(capset_data)
+            )
+        );
+    }
+    test_field_capset_data();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_cmd_get_edid {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub scanout: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_cmd_get_edid() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_cmd_get_edid>(),
+        32usize,
+        concat!("Size of: ", stringify!(virtio_gpu_cmd_get_edid))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_cmd_get_edid>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_cmd_get_edid))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_cmd_get_edid>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_cmd_get_edid),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_scanout() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_cmd_get_edid>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).scanout) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_cmd_get_edid),
+                "::",
+                stringify!(scanout)
+            )
+        );
+    }
+    test_field_scanout();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_cmd_get_edid>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_cmd_get_edid),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resp_edid {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub size: __le32,
+    pub padding: __le32,
+    pub edid: [__u8; 1024usize],
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resp_edid() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resp_edid>(),
+        1056usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resp_edid))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resp_edid>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resp_edid))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_edid>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_edid),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_size() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_edid>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_edid),
+                "::",
+                stringify!(size)
+            )
+        );
+    }
+    test_field_size();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_edid>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_edid),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+    fn test_field_edid() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_edid>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).edid) as usize - ptr as usize
+            },
+            32usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_edid),
+                "::",
+                stringify!(edid)
+            )
+        );
+    }
+    test_field_edid();
+}
+impl Default for virtio_gpu_resp_edid {
+    fn default() -> Self {
+        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
+        unsafe {
+            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
+            s.assume_init()
+        }
+    }
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_config {
+    pub events_read: __le32,
+    pub events_clear: __le32,
+    pub num_scanouts: __le32,
+    pub num_capsets: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_config() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_config>(),
+        16usize,
+        concat!("Size of: ", stringify!(virtio_gpu_config))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_config>(),
+        4usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_config))
+    );
+    fn test_field_events_read() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_config>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).events_read) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_config),
+                "::",
+                stringify!(events_read)
+            )
+        );
+    }
+    test_field_events_read();
+    fn test_field_events_clear() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_config>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).events_clear) as usize - ptr as usize
+            },
+            4usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_config),
+                "::",
+                stringify!(events_clear)
+            )
+        );
+    }
+    test_field_events_clear();
+    fn test_field_num_scanouts() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_config>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).num_scanouts) as usize - ptr as usize
+            },
+            8usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_config),
+                "::",
+                stringify!(num_scanouts)
+            )
+        );
+    }
+    test_field_num_scanouts();
+    fn test_field_num_capsets() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_config>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).num_capsets) as usize - ptr as usize
+            },
+            12usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_config),
+                "::",
+                stringify!(num_capsets)
+            )
+        );
+    }
+    test_field_num_capsets();
+}
+pub const virtio_gpu_formats_VIRTIO_GPU_FORMAT_B8G8R8A8_UNORM: virtio_gpu_formats = 1;
+pub const virtio_gpu_formats_VIRTIO_GPU_FORMAT_B8G8R8X8_UNORM: virtio_gpu_formats = 2;
+pub const virtio_gpu_formats_VIRTIO_GPU_FORMAT_A8R8G8B8_UNORM: virtio_gpu_formats = 3;
+pub const virtio_gpu_formats_VIRTIO_GPU_FORMAT_X8R8G8B8_UNORM: virtio_gpu_formats = 4;
+pub const virtio_gpu_formats_VIRTIO_GPU_FORMAT_R8G8B8A8_UNORM: virtio_gpu_formats = 67;
+pub const virtio_gpu_formats_VIRTIO_GPU_FORMAT_X8B8G8R8_UNORM: virtio_gpu_formats = 68;
+pub const virtio_gpu_formats_VIRTIO_GPU_FORMAT_A8B8G8R8_UNORM: virtio_gpu_formats = 121;
+pub const virtio_gpu_formats_VIRTIO_GPU_FORMAT_R8G8B8X8_UNORM: virtio_gpu_formats = 134;
+pub type virtio_gpu_formats = ::std::os::raw::c_uint;
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resource_assign_uuid {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub resource_id: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resource_assign_uuid() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resource_assign_uuid>(),
+        32usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resource_assign_uuid))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resource_assign_uuid>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resource_assign_uuid))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_assign_uuid>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_assign_uuid),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_assign_uuid>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_assign_uuid),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_assign_uuid>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_assign_uuid),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resp_resource_uuid {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub uuid: [__u8; 16usize],
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resp_resource_uuid() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resp_resource_uuid>(),
+        40usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resp_resource_uuid))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resp_resource_uuid>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resp_resource_uuid))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_resource_uuid>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_resource_uuid),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_uuid() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_resource_uuid>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_resource_uuid),
+                "::",
+                stringify!(uuid)
+            )
+        );
+    }
+    test_field_uuid();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resource_create_blob {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub resource_id: __le32,
+    pub blob_mem: __le32,
+    pub blob_flags: __le32,
+    pub nr_entries: __le32,
+    pub blob_id: __le64,
+    pub size: __le64,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resource_create_blob() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resource_create_blob>(),
+        56usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resource_create_blob))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resource_create_blob>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resource_create_blob))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_blob),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_blob),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_blob_mem() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).blob_mem) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_blob),
+                "::",
+                stringify!(blob_mem)
+            )
+        );
+    }
+    test_field_blob_mem();
+    fn test_field_blob_flags() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).blob_flags) as usize - ptr as usize
+            },
+            32usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_blob),
+                "::",
+                stringify!(blob_flags)
+            )
+        );
+    }
+    test_field_blob_flags();
+    fn test_field_nr_entries() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).nr_entries) as usize - ptr as usize
+            },
+            36usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_blob),
+                "::",
+                stringify!(nr_entries)
+            )
+        );
+    }
+    test_field_nr_entries();
+    fn test_field_blob_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).blob_id) as usize - ptr as usize
+            },
+            40usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_blob),
+                "::",
+                stringify!(blob_id)
+            )
+        );
+    }
+    test_field_blob_id();
+    fn test_field_size() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_create_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
+            },
+            48usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_create_blob),
+                "::",
+                stringify!(size)
+            )
+        );
+    }
+    test_field_size();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_set_scanout_blob {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub r: virtio_gpu_rect,
+    pub scanout_id: __le32,
+    pub resource_id: __le32,
+    pub width: __le32,
+    pub height: __le32,
+    pub format: __le32,
+    pub padding: __le32,
+    pub strides: [__le32; 4usize],
+    pub offsets: [__le32; 4usize],
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_set_scanout_blob() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_set_scanout_blob>(),
+        96usize,
+        concat!("Size of: ", stringify!(virtio_gpu_set_scanout_blob))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_set_scanout_blob>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_set_scanout_blob))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout_blob),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_r() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout_blob),
+                "::",
+                stringify!(r)
+            )
+        );
+    }
+    test_field_r();
+    fn test_field_scanout_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).scanout_id) as usize - ptr as usize
+            },
+            40usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout_blob),
+                "::",
+                stringify!(scanout_id)
+            )
+        );
+    }
+    test_field_scanout_id();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            44usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout_blob),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_width() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
+            },
+            48usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout_blob),
+                "::",
+                stringify!(width)
+            )
+        );
+    }
+    test_field_width();
+    fn test_field_height() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
+            },
+            52usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout_blob),
+                "::",
+                stringify!(height)
+            )
+        );
+    }
+    test_field_height();
+    fn test_field_format() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
+            },
+            56usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout_blob),
+                "::",
+                stringify!(format)
+            )
+        );
+    }
+    test_field_format();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            60usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout_blob),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+    fn test_field_strides() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).strides) as usize - ptr as usize
+            },
+            64usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout_blob),
+                "::",
+                stringify!(strides)
+            )
+        );
+    }
+    test_field_strides();
+    fn test_field_offsets() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_set_scanout_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).offsets) as usize - ptr as usize
+            },
+            80usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_set_scanout_blob),
+                "::",
+                stringify!(offsets)
+            )
+        );
+    }
+    test_field_offsets();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resource_map_blob {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub resource_id: __le32,
+    pub padding: __le32,
+    pub offset: __le64,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resource_map_blob() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resource_map_blob>(),
+        40usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resource_map_blob))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resource_map_blob>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resource_map_blob))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_map_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_map_blob),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_map_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_map_blob),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_map_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_map_blob),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+    fn test_field_offset() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_map_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
+            },
+            32usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_map_blob),
+                "::",
+                stringify!(offset)
+            )
+        );
+    }
+    test_field_offset();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resp_map_info {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub map_info: __u32,
+    pub padding: __u32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resp_map_info() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resp_map_info>(),
+        32usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resp_map_info))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resp_map_info>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resp_map_info))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_map_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_map_info),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_map_info() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_map_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).map_info) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_map_info),
+                "::",
+                stringify!(map_info)
+            )
+        );
+    }
+    test_field_map_info();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resp_map_info>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resp_map_info),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
+#[repr(C)]
+#[derive(Debug, Default, Copy, Clone, PartialEq)]
+pub struct virtio_gpu_resource_unmap_blob {
+    pub hdr: virtio_gpu_ctrl_hdr,
+    pub resource_id: __le32,
+    pub padding: __le32,
+}
+#[test]
+fn bindgen_test_layout_virtio_gpu_resource_unmap_blob() {
+    assert_eq!(
+        ::std::mem::size_of::<virtio_gpu_resource_unmap_blob>(),
+        32usize,
+        concat!("Size of: ", stringify!(virtio_gpu_resource_unmap_blob))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<virtio_gpu_resource_unmap_blob>(),
+        8usize,
+        concat!("Alignment of ", stringify!(virtio_gpu_resource_unmap_blob))
+    );
+    fn test_field_hdr() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_unmap_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
+            },
+            0usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_unmap_blob),
+                "::",
+                stringify!(hdr)
+            )
+        );
+    }
+    test_field_hdr();
+    fn test_field_resource_id() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_unmap_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize
+            },
+            24usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_unmap_blob),
+                "::",
+                stringify!(resource_id)
+            )
+        );
+    }
+    test_field_resource_id();
+    fn test_field_padding() {
+        assert_eq!(
+            unsafe {
+                let uninit = ::std::mem::MaybeUninit::<virtio_gpu_resource_unmap_blob>::uninit();
+                let ptr = uninit.as_ptr();
+                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
+            },
+            28usize,
+            concat!(
+                "Offset of field: ",
+                stringify!(virtio_gpu_resource_unmap_blob),
+                "::",
+                stringify!(padding)
+            )
+        );
+    }
+    test_field_padding();
+}
-- 
2.37.1

